/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 9/16/2016 11:50:03 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace HelpDeskManager.Data
{
	public partial class DAOIssue : HelpDesk_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _typeid;
		protected Int32? _staffid;
		protected Int32? _departmentid;
		protected Int32? _statusid;
		protected string _details;
		protected Int32? _technicianid;
		protected string _remarks;
		#endregion

		#region class methods
		public DAOIssue()
		{
		}
		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Issue based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOIssue.
		///</returns>
		///<parameters>
		///Int32? typeid
		///</parameters>
		public static IList<DAOIssue> SelectAllByTypeid(Int32? typeid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByTypeid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Issue");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@typeid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)typeid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOIssue> objList = new List<DAOIssue>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOIssue retObj = new DAOIssue();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._typeid					 = Convert.IsDBNull(row["typeid"]) ? (Int32?)null : (Int32?)row["typeid"];
						retObj._staffid					 = Convert.IsDBNull(row["staffid"]) ? (Int32?)null : (Int32?)row["staffid"];
						retObj._departmentid					 = Convert.IsDBNull(row["departmentid"]) ? (Int32?)null : (Int32?)row["departmentid"];
						retObj._statusid					 = Convert.IsDBNull(row["statusid"]) ? (Int32?)null : (Int32?)row["statusid"];
						retObj._details					 = Convert.IsDBNull(row["details"]) ? null : (string)row["details"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						retObj._remarks					 = Convert.IsDBNull(row["remarks"]) ? null : (string)row["remarks"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? typeid
		///</parameters>
		public static Int32 SelectAllByTypeidCount(Int32? typeid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByTypeidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@typeid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)typeid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Issue with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///HelpDesk_TxConnectionProvider connectionProvider, Int32? typeid
		///</parameters>
		public static void DeleteAllByTypeid(HelpDesk_TxConnectionProvider connectionProvider, Int32? typeid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_DeleteAllByTypeid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@typeid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)typeid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Issue based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOIssue.
		///</returns>
		///<parameters>
		///Int32? staffid
		///</parameters>
		public static IList<DAOIssue> SelectAllByStaffid(Int32? staffid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByStaffid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Issue");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)staffid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOIssue> objList = new List<DAOIssue>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOIssue retObj = new DAOIssue();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._typeid					 = Convert.IsDBNull(row["typeid"]) ? (Int32?)null : (Int32?)row["typeid"];
						retObj._staffid					 = Convert.IsDBNull(row["staffid"]) ? (Int32?)null : (Int32?)row["staffid"];
						retObj._departmentid					 = Convert.IsDBNull(row["departmentid"]) ? (Int32?)null : (Int32?)row["departmentid"];
						retObj._statusid					 = Convert.IsDBNull(row["statusid"]) ? (Int32?)null : (Int32?)row["statusid"];
						retObj._details					 = Convert.IsDBNull(row["details"]) ? null : (string)row["details"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						retObj._remarks					 = Convert.IsDBNull(row["remarks"]) ? null : (string)row["remarks"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? staffid
		///</parameters>
		public static Int32 SelectAllByStaffidCount(Int32? staffid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByStaffidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)staffid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Issue with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///HelpDesk_TxConnectionProvider connectionProvider, Int32? staffid
		///</parameters>
		public static void DeleteAllByStaffid(HelpDesk_TxConnectionProvider connectionProvider, Int32? staffid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_DeleteAllByStaffid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)staffid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Issue based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOIssue.
		///</returns>
		///<parameters>
		///Int32? departmentid
		///</parameters>
		public static IList<DAOIssue> SelectAllByDepartmentid(Int32? departmentid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByDepartmentid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Issue");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@departmentid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)departmentid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOIssue> objList = new List<DAOIssue>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOIssue retObj = new DAOIssue();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._typeid					 = Convert.IsDBNull(row["typeid"]) ? (Int32?)null : (Int32?)row["typeid"];
						retObj._staffid					 = Convert.IsDBNull(row["staffid"]) ? (Int32?)null : (Int32?)row["staffid"];
						retObj._departmentid					 = Convert.IsDBNull(row["departmentid"]) ? (Int32?)null : (Int32?)row["departmentid"];
						retObj._statusid					 = Convert.IsDBNull(row["statusid"]) ? (Int32?)null : (Int32?)row["statusid"];
						retObj._details					 = Convert.IsDBNull(row["details"]) ? null : (string)row["details"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						retObj._remarks					 = Convert.IsDBNull(row["remarks"]) ? null : (string)row["remarks"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? departmentid
		///</parameters>
		public static Int32 SelectAllByDepartmentidCount(Int32? departmentid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByDepartmentidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@departmentid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)departmentid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Issue with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///HelpDesk_TxConnectionProvider connectionProvider, Int32? departmentid
		///</parameters>
		public static void DeleteAllByDepartmentid(HelpDesk_TxConnectionProvider connectionProvider, Int32? departmentid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_DeleteAllByDepartmentid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@departmentid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)departmentid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Issue based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOIssue.
		///</returns>
		///<parameters>
		///Int32? statusid
		///</parameters>
		public static IList<DAOIssue> SelectAllByStatusid(Int32? statusid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByStatusid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Issue");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@statusid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)statusid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOIssue> objList = new List<DAOIssue>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOIssue retObj = new DAOIssue();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._typeid					 = Convert.IsDBNull(row["typeid"]) ? (Int32?)null : (Int32?)row["typeid"];
						retObj._staffid					 = Convert.IsDBNull(row["staffid"]) ? (Int32?)null : (Int32?)row["staffid"];
						retObj._departmentid					 = Convert.IsDBNull(row["departmentid"]) ? (Int32?)null : (Int32?)row["departmentid"];
						retObj._statusid					 = Convert.IsDBNull(row["statusid"]) ? (Int32?)null : (Int32?)row["statusid"];
						retObj._details					 = Convert.IsDBNull(row["details"]) ? null : (string)row["details"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						retObj._remarks					 = Convert.IsDBNull(row["remarks"]) ? null : (string)row["remarks"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? statusid
		///</parameters>
		public static Int32 SelectAllByStatusidCount(Int32? statusid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByStatusidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@statusid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)statusid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Issue with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///HelpDesk_TxConnectionProvider connectionProvider, Int32? statusid
		///</parameters>
		public static void DeleteAllByStatusid(HelpDesk_TxConnectionProvider connectionProvider, Int32? statusid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_DeleteAllByStatusid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@statusid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)statusid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Issue based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOIssue.
		///</returns>
		///<parameters>
		///Int32? technicianid
		///</parameters>
		public static IList<DAOIssue> SelectAllByTechnicianid(Int32? technicianid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByTechnicianid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Issue");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)technicianid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOIssue> objList = new List<DAOIssue>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOIssue retObj = new DAOIssue();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._typeid					 = Convert.IsDBNull(row["typeid"]) ? (Int32?)null : (Int32?)row["typeid"];
						retObj._staffid					 = Convert.IsDBNull(row["staffid"]) ? (Int32?)null : (Int32?)row["staffid"];
						retObj._departmentid					 = Convert.IsDBNull(row["departmentid"]) ? (Int32?)null : (Int32?)row["departmentid"];
						retObj._statusid					 = Convert.IsDBNull(row["statusid"]) ? (Int32?)null : (Int32?)row["statusid"];
						retObj._details					 = Convert.IsDBNull(row["details"]) ? null : (string)row["details"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						retObj._remarks					 = Convert.IsDBNull(row["remarks"]) ? null : (string)row["remarks"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? technicianid
		///</parameters>
		public static Int32 SelectAllByTechnicianidCount(Int32? technicianid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllByTechnicianidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)technicianid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Issue with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///HelpDesk_TxConnectionProvider connectionProvider, Int32? technicianid
		///</parameters>
		public static void DeleteAllByTechnicianid(HelpDesk_TxConnectionProvider connectionProvider, Int32? technicianid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_DeleteAllByTechnicianid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)technicianid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Issue
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new SqlParameter("@typeid", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_typeid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@staffid", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_staffid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@departmentid", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_departmentid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@statusid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_statusid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@details", SqlDbType.VarChar, 800, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_details?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_technicianid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@remarks", SqlDbType.VarChar, 200, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_remarks?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_typeid					 = Convert.IsDBNull(command.Parameters["@typeid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@typeid"].Value;
				_staffid					 = Convert.IsDBNull(command.Parameters["@staffid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@staffid"].Value;
				_departmentid					 = Convert.IsDBNull(command.Parameters["@departmentid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@departmentid"].Value;
				_statusid					 = Convert.IsDBNull(command.Parameters["@statusid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@statusid"].Value;
				_details					 = Convert.IsDBNull(command.Parameters["@details"].Value) ? null : (string)command.Parameters["@details"].Value;
				_technicianid					 = Convert.IsDBNull(command.Parameters["@technicianid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@technicianid"].Value;
				_remarks					 = Convert.IsDBNull(command.Parameters["@remarks"].Value) ? null : (string)command.Parameters["@remarks"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Issue
		///</Summary>
		///<returns>
		///IList-DAOIssue.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOIssue> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Issue");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOIssue> objList = new List<DAOIssue>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOIssue retObj = new DAOIssue();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._typeid					 = Convert.IsDBNull(row["typeid"]) ? (Int32?)null : (Int32?)row["typeid"];
						retObj._staffid					 = Convert.IsDBNull(row["staffid"]) ? (Int32?)null : (Int32?)row["staffid"];
						retObj._departmentid					 = Convert.IsDBNull(row["departmentid"]) ? (Int32?)null : (Int32?)row["departmentid"];
						retObj._statusid					 = Convert.IsDBNull(row["statusid"]) ? (Int32?)null : (Int32?)row["statusid"];
						retObj._details					 = Convert.IsDBNull(row["details"]) ? null : (string)row["details"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						retObj._remarks					 = Convert.IsDBNull(row["remarks"]) ? null : (string)row["remarks"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOIssue.
		///</returns>
		///<parameters>
		///DAOIssue daoIssue
		///</parameters>
		public static IList<DAOIssue> SelectAllBySearchFields(DAOIssue daoIssue)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Issue");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@typeid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Typeid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Staffid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@departmentid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Departmentid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@statusid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Statusid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@details", SqlDbType.VarChar, 800, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoIssue.Details?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Technicianid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@remarks", SqlDbType.VarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoIssue.Remarks?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOIssue> objList = new List<DAOIssue>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOIssue retObj = new DAOIssue();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._typeid					 = Convert.IsDBNull(row["typeid"]) ? (Int32?)null : (Int32?)row["typeid"];
						retObj._staffid					 = Convert.IsDBNull(row["staffid"]) ? (Int32?)null : (Int32?)row["staffid"];
						retObj._departmentid					 = Convert.IsDBNull(row["departmentid"]) ? (Int32?)null : (Int32?)row["departmentid"];
						retObj._statusid					 = Convert.IsDBNull(row["statusid"]) ? (Int32?)null : (Int32?)row["statusid"];
						retObj._details					 = Convert.IsDBNull(row["details"]) ? null : (string)row["details"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						retObj._remarks					 = Convert.IsDBNull(row["remarks"]) ? null : (string)row["remarks"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOIssue daoIssue
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOIssue daoIssue)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIssue_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@typeid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Typeid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Staffid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@departmentid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Departmentid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@statusid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Statusid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@details", SqlDbType.VarChar, 800, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoIssue.Details?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoIssue.Technicianid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@remarks", SqlDbType.VarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoIssue.Remarks?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public Int32? Typeid
		{
			get
			{
				return _typeid;
			}
			set
			{
				_typeid = value;
			}
		}

		public Int32? Staffid
		{
			get
			{
				return _staffid;
			}
			set
			{
				_staffid = value;
			}
		}

		public Int32? Departmentid
		{
			get
			{
				return _departmentid;
			}
			set
			{
				_departmentid = value;
			}
		}

		public Int32? Statusid
		{
			get
			{
				return _statusid;
			}
			set
			{
				_statusid = value;
			}
		}

		public string Details
		{
			get
			{
				return _details;
			}
			set
			{
				_details = value;
			}
		}

		public Int32? Technicianid
		{
			get
			{
				return _technicianid;
			}
			set
			{
				_technicianid = value;
			}
		}

		public string Remarks
		{
			get
			{
				return _remarks;
			}
			set
			{
				_remarks = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace HelpDeskManager.Data
{
	public partial class InlineProcs
	{
		internal static string ctprIssue_SelectAllByTypeid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[typeid]
			,[staffid]
			,[departmentid]
			,[statusid]
			,[details]
			,[technicianid]
			,[remarks]
			FROM [dbo].[Issue]
			WHERE 
			[typeid] = @typeid OR ([typeid] IS NULL AND @typeid IS NULL)
			";

		internal static string ctprIssue_SelectAllByTypeidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Issue]
			WHERE 
			[typeid] = @typeid OR ([typeid] IS NULL AND @typeid IS NULL)
			";

		internal static string ctprIssue_DeleteAllByTypeid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Issue]
			WHERE 
			[typeid] = @typeid OR ([typeid] IS NULL AND @typeid IS NULL)
			";

		internal static string ctprIssue_SelectAllByStaffid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[typeid]
			,[staffid]
			,[departmentid]
			,[statusid]
			,[details]
			,[technicianid]
			,[remarks]
			FROM [dbo].[Issue]
			WHERE 
			[staffid] = @staffid OR ([staffid] IS NULL AND @staffid IS NULL)
			";

		internal static string ctprIssue_SelectAllByStaffidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Issue]
			WHERE 
			[staffid] = @staffid OR ([staffid] IS NULL AND @staffid IS NULL)
			";

		internal static string ctprIssue_DeleteAllByStaffid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Issue]
			WHERE 
			[staffid] = @staffid OR ([staffid] IS NULL AND @staffid IS NULL)
			";

		internal static string ctprIssue_SelectAllByDepartmentid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[typeid]
			,[staffid]
			,[departmentid]
			,[statusid]
			,[details]
			,[technicianid]
			,[remarks]
			FROM [dbo].[Issue]
			WHERE 
			[departmentid] = @departmentid OR ([departmentid] IS NULL AND @departmentid IS NULL)
			";

		internal static string ctprIssue_SelectAllByDepartmentidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Issue]
			WHERE 
			[departmentid] = @departmentid OR ([departmentid] IS NULL AND @departmentid IS NULL)
			";

		internal static string ctprIssue_DeleteAllByDepartmentid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Issue]
			WHERE 
			[departmentid] = @departmentid OR ([departmentid] IS NULL AND @departmentid IS NULL)
			";

		internal static string ctprIssue_SelectAllByStatusid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[typeid]
			,[staffid]
			,[departmentid]
			,[statusid]
			,[details]
			,[technicianid]
			,[remarks]
			FROM [dbo].[Issue]
			WHERE 
			[statusid] = @statusid OR ([statusid] IS NULL AND @statusid IS NULL)
			";

		internal static string ctprIssue_SelectAllByStatusidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Issue]
			WHERE 
			[statusid] = @statusid OR ([statusid] IS NULL AND @statusid IS NULL)
			";

		internal static string ctprIssue_DeleteAllByStatusid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Issue]
			WHERE 
			[statusid] = @statusid OR ([statusid] IS NULL AND @statusid IS NULL)
			";

		internal static string ctprIssue_SelectAllByTechnicianid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[typeid]
			,[staffid]
			,[departmentid]
			,[statusid]
			,[details]
			,[technicianid]
			,[remarks]
			FROM [dbo].[Issue]
			WHERE 
			[technicianid] = @technicianid OR ([technicianid] IS NULL AND @technicianid IS NULL)
			";

		internal static string ctprIssue_SelectAllByTechnicianidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Issue]
			WHERE 
			[technicianid] = @technicianid OR ([technicianid] IS NULL AND @technicianid IS NULL)
			";

		internal static string ctprIssue_DeleteAllByTechnicianid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Issue]
			WHERE 
			[technicianid] = @technicianid OR ([technicianid] IS NULL AND @technicianid IS NULL)
			";

		internal static string ctprIssue_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Issue]
			(
			[typeid]
			,[staffid]
			,[departmentid]
			,[statusid]
			,[details]
			,[technicianid]
			,[remarks]
			)
			VALUES
			(
			@typeid
			,@staffid
			,@departmentid
			,@statusid
			,@details
			,@technicianid
			,@remarks
			)
			SELECT 
			@id = [id]
			,@typeid = [typeid]
			,@staffid = [staffid]
			,@departmentid = [departmentid]
			,@statusid = [statusid]
			,@details = [details]
			,@technicianid = [technicianid]
			,@remarks = [remarks]
			FROM [dbo].[Issue]
			WHERE 
			id = SCOPE_IDENTITY()
			";

		internal static string ctprIssue_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[id]
			,[typeid]
			,[staffid]
			,[departmentid]
			,[statusid]
			,[details]
			,[technicianid]
			,[remarks]
			FROM [dbo].[Issue]
			";

		internal static string ctprIssue_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Issue]
			";

		internal static string ctprIssue_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[id],
			[typeid],
			[staffid],
			[departmentid],
			[statusid],
			[details],
			[technicianid],
			[remarks]
			FROM [dbo].[Issue]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([typeid] LIKE @typeid OR @typeid is null)
			AND ([staffid] LIKE @staffid OR @staffid is null)
			AND ([departmentid] LIKE @departmentid OR @departmentid is null)
			AND ([statusid] LIKE @statusid OR @statusid is null)
			AND ([details] LIKE @details OR @details is null)
			AND ([technicianid] LIKE @technicianid OR @technicianid is null)
			AND ([remarks] LIKE @remarks OR @remarks is null)
			";

		internal static string ctprIssue_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[Issue]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([typeid] LIKE @typeid OR @typeid is null)
			AND ([staffid] LIKE @staffid OR @staffid is null)
			AND ([departmentid] LIKE @departmentid OR @departmentid is null)
			AND ([statusid] LIKE @statusid OR @statusid is null)
			AND ([details] LIKE @details OR @details is null)
			AND ([technicianid] LIKE @technicianid OR @technicianid is null)
			AND ([remarks] LIKE @remarks OR @remarks is null)
			";

	}
}
#endregion
