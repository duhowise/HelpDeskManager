/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 9/16/2016 11:50:03 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace HelpDeskManager.Data
{
	public partial class DAOVisitation : HelpDesk_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected string _name;
		protected DateTime? _arrived;
		protected Int32? _staffid;
		protected string _purpose;
		protected DateTime? _departed;
		#endregion

		#region class methods
		public DAOVisitation()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Visitation based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOVisitation
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAOVisitation SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Visitation");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOVisitation retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOVisitation();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["id"];
					retObj._name					 = Convert.IsDBNull(dt.Rows[0]["Name"]) ? null : (string)dt.Rows[0]["Name"];
					retObj._arrived					 = Convert.IsDBNull(dt.Rows[0]["Arrived"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["Arrived"];
					retObj._staffid					 = Convert.IsDBNull(dt.Rows[0]["Staffid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Staffid"];
					retObj._purpose					 = Convert.IsDBNull(dt.Rows[0]["Purpose"]) ? null : (string)dt.Rows[0]["Purpose"];
					retObj._departed					 = Convert.IsDBNull(dt.Rows[0]["Departed"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["Departed"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Visitation based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Visitation based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOVisitation.
		///</returns>
		///<parameters>
		///Int32? staffid
		///</parameters>
		public static IList<DAOVisitation> SelectAllByStaffid(Int32? staffid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_SelectAllByStaffid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Visitation");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)staffid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOVisitation> objList = new List<DAOVisitation>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOVisitation retObj = new DAOVisitation();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._arrived					 = Convert.IsDBNull(row["Arrived"]) ? (DateTime?)null : (DateTime?)row["Arrived"];
						retObj._staffid					 = Convert.IsDBNull(row["Staffid"]) ? (Int32?)null : (Int32?)row["Staffid"];
						retObj._purpose					 = Convert.IsDBNull(row["Purpose"]) ? null : (string)row["Purpose"];
						retObj._departed					 = Convert.IsDBNull(row["Departed"]) ? (DateTime?)null : (DateTime?)row["Departed"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? staffid
		///</parameters>
		public static Int32 SelectAllByStaffidCount(Int32? staffid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_SelectAllByStaffidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)staffid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Visitation with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///HelpDesk_TxConnectionProvider connectionProvider, Int32? staffid
		///</parameters>
		public static void DeleteAllByStaffid(HelpDesk_TxConnectionProvider connectionProvider, Int32? staffid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_DeleteAllByStaffid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)staffid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Visitation
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Name", SqlDbType.VarChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Arrived", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_arrived?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Staffid", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_staffid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Purpose", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_purpose?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Departed", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_departed?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_name					 = Convert.IsDBNull(command.Parameters["@Name"].Value) ? null : (string)command.Parameters["@Name"].Value;
				_arrived					 = Convert.IsDBNull(command.Parameters["@Arrived"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@Arrived"].Value;
				_staffid					 = Convert.IsDBNull(command.Parameters["@Staffid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Staffid"].Value;
				_purpose					 = Convert.IsDBNull(command.Parameters["@Purpose"].Value) ? null : (string)command.Parameters["@Purpose"].Value;
				_departed					 = Convert.IsDBNull(command.Parameters["@Departed"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@Departed"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Visitation
		///</Summary>
		///<returns>
		///IList-DAOVisitation.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOVisitation> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Visitation");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOVisitation> objList = new List<DAOVisitation>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOVisitation retObj = new DAOVisitation();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._arrived					 = Convert.IsDBNull(row["Arrived"]) ? (DateTime?)null : (DateTime?)row["Arrived"];
						retObj._staffid					 = Convert.IsDBNull(row["Staffid"]) ? (Int32?)null : (Int32?)row["Staffid"];
						retObj._purpose					 = Convert.IsDBNull(row["Purpose"]) ? null : (string)row["Purpose"];
						retObj._departed					 = Convert.IsDBNull(row["Departed"]) ? (DateTime?)null : (DateTime?)row["Departed"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOVisitation.
		///</returns>
		///<parameters>
		///DAOVisitation daoVisitation
		///</parameters>
		public static IList<DAOVisitation> SelectAllBySearchFields(DAOVisitation daoVisitation)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Visitation");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Name", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Arrived", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Arrived?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Staffid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Purpose", SqlDbType.VarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Purpose?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Departed", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Departed?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOVisitation> objList = new List<DAOVisitation>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOVisitation retObj = new DAOVisitation();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._arrived					 = Convert.IsDBNull(row["Arrived"]) ? (DateTime?)null : (DateTime?)row["Arrived"];
						retObj._staffid					 = Convert.IsDBNull(row["Staffid"]) ? (Int32?)null : (Int32?)row["Staffid"];
						retObj._purpose					 = Convert.IsDBNull(row["Purpose"]) ? null : (string)row["Purpose"];
						retObj._departed					 = Convert.IsDBNull(row["Departed"]) ? (DateTime?)null : (DateTime?)row["Departed"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOVisitation daoVisitation
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOVisitation daoVisitation)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Name", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Arrived", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Arrived?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Staffid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Staffid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Purpose", SqlDbType.VarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Purpose?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Departed", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoVisitation.Departed?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Visitation based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprVisitation_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Name", SqlDbType.VarChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Arrived", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_arrived?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Staffid", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_staffid?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Purpose", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_purpose?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Departed", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_departed?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_name					 = Convert.IsDBNull(command.Parameters["@Name"].Value) ? null : (string)command.Parameters["@Name"].Value;
				_arrived					 = Convert.IsDBNull(command.Parameters["@Arrived"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@Arrived"].Value;
				_staffid					 = Convert.IsDBNull(command.Parameters["@Staffid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Staffid"].Value;
				_purpose					 = Convert.IsDBNull(command.Parameters["@Purpose"].Value) ? null : (string)command.Parameters["@Purpose"].Value;
				_departed					 = Convert.IsDBNull(command.Parameters["@Departed"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@Departed"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public string Name
		{
			get
			{
				return _name;
			}
			set
			{
				_name = value;
			}
		}

		public DateTime? Arrived
		{
			get
			{
				return _arrived;
			}
			set
			{
				_arrived = value;
			}
		}

		public Int32? Staffid
		{
			get
			{
				return _staffid;
			}
			set
			{
				_staffid = value;
			}
		}

		public string Purpose
		{
			get
			{
				return _purpose;
			}
			set
			{
				_purpose = value;
			}
		}

		public DateTime? Departed
		{
			get
			{
				return _departed;
			}
			set
			{
				_departed = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace HelpDeskManager.Data
{
	public partial class InlineProcs
	{
		internal static string ctprVisitation_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[id]
			,[Name]
			,[Arrived]
			,[Staffid]
			,[Purpose]
			,[Departed]
			FROM [dbo].[Visitation]
			WHERE 
			[id] = @id
			";

		internal static string ctprVisitation_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Visitation]
			WHERE 
			[id] = @id
			";

		internal static string ctprVisitation_SelectAllByStaffid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[Name]
			,[Arrived]
			,[Staffid]
			,[Purpose]
			,[Departed]
			FROM [dbo].[Visitation]
			WHERE 
			[Staffid] = @Staffid OR ([Staffid] IS NULL AND @Staffid IS NULL)
			";

		internal static string ctprVisitation_SelectAllByStaffidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Visitation]
			WHERE 
			[Staffid] = @Staffid OR ([Staffid] IS NULL AND @Staffid IS NULL)
			";

		internal static string ctprVisitation_DeleteAllByStaffid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Visitation]
			WHERE 
			[Staffid] = @Staffid OR ([Staffid] IS NULL AND @Staffid IS NULL)
			";

		internal static string ctprVisitation_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Visitation]
			(
			[id]
			,[Name]
			,[Arrived]
			,[Staffid]
			,[Purpose]
			,[Departed]
			)
			VALUES
			(
			@id
			,@Name
			,@Arrived
			,@Staffid
			,@Purpose
			,@Departed
			)
			SELECT 
			@id = [id]
			,@Name = [Name]
			,@Arrived = [Arrived]
			,@Staffid = [Staffid]
			,@Purpose = [Purpose]
			,@Departed = [Departed]
			FROM [dbo].[Visitation]
			WHERE 
			[id] = @id
			";

		internal static string ctprVisitation_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[id]
			,[Name]
			,[Arrived]
			,[Staffid]
			,[Purpose]
			,[Departed]
			FROM [dbo].[Visitation]
			";

		internal static string ctprVisitation_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Visitation]
			";

		internal static string ctprVisitation_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[id],
			[Name],
			[Arrived],
			[Staffid],
			[Purpose],
			[Departed]
			FROM [dbo].[Visitation]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([Name] LIKE @Name OR @Name is null)
			AND ([Arrived] LIKE @Arrived OR @Arrived is null)
			AND ([Staffid] LIKE @Staffid OR @Staffid is null)
			AND ([Purpose] LIKE @Purpose OR @Purpose is null)
			AND ([Departed] LIKE @Departed OR @Departed is null)
			";

		internal static string ctprVisitation_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[Visitation]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([Name] LIKE @Name OR @Name is null)
			AND ([Arrived] LIKE @Arrived OR @Arrived is null)
			AND ([Staffid] LIKE @Staffid OR @Staffid is null)
			AND ([Purpose] LIKE @Purpose OR @Purpose is null)
			AND ([Departed] LIKE @Departed OR @Departed is null)
			";

		internal static string ctprVisitation_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Visitation]
			SET
			[Name] = @Name
			,[Arrived] = @Arrived
			,[Staffid] = @Staffid
			,[Purpose] = @Purpose
			,[Departed] = @Departed
			WHERE 
			[id] = @id
			SELECT 
			@id = [id]
			,@Name = [Name]
			,@Arrived = [Arrived]
			,@Staffid = [Staffid]
			,@Purpose = [Purpose]
			,@Departed = [Departed]
			FROM [dbo].[Visitation]
			WHERE 
			[id] = @id
			";

	}
}
#endregion
