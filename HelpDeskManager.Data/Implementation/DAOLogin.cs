/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 9/16/2016 11:50:03 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace HelpDeskManager.Data
{
	public partial class DAOLogin : HelpDesk_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected string _username;
		protected string _password;
		protected Int32? _technicianid;
		#endregion

		#region class methods
		public DAOLogin()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table login based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOLogin
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAOLogin SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("login");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOLogin retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOLogin();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["id"];
					retObj._username					 = Convert.IsDBNull(dt.Rows[0]["username"]) ? null : (string)dt.Rows[0]["username"];
					retObj._password					 = Convert.IsDBNull(dt.Rows[0]["password"]) ? null : (string)dt.Rows[0]["password"];
					retObj._technicianid					 = Convert.IsDBNull(dt.Rows[0]["technicianid"]) ? (Int32?)null : (Int32?)dt.Rows[0]["technicianid"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table login based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table login based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOLogin.
		///</returns>
		///<parameters>
		///Int32? technicianid
		///</parameters>
		public static IList<DAOLogin> SelectAllByTechnicianid(Int32? technicianid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_SelectAllByTechnicianid;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("login");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)technicianid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOLogin> objList = new List<DAOLogin>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOLogin retObj = new DAOLogin();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._username					 = Convert.IsDBNull(row["username"]) ? null : (string)row["username"];
						retObj._password					 = Convert.IsDBNull(row["password"]) ? null : (string)row["password"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? technicianid
		///</parameters>
		public static Int32 SelectAllByTechnicianidCount(Int32? technicianid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_SelectAllByTechnicianidCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)technicianid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table login with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///HelpDesk_TxConnectionProvider connectionProvider, Int32? technicianid
		///</parameters>
		public static void DeleteAllByTechnicianid(HelpDesk_TxConnectionProvider connectionProvider, Int32? technicianid)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_DeleteAllByTechnicianid;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)technicianid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table login
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new SqlParameter("@username", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_username?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@password", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_password?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_technicianid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_username					 = Convert.IsDBNull(command.Parameters["@username"].Value) ? null : (string)command.Parameters["@username"].Value;
				_password					 = Convert.IsDBNull(command.Parameters["@password"].Value) ? null : (string)command.Parameters["@password"].Value;
				_technicianid					 = Convert.IsDBNull(command.Parameters["@technicianid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@technicianid"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table login
		///</Summary>
		///<returns>
		///IList-DAOLogin.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOLogin> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("login");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOLogin> objList = new List<DAOLogin>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOLogin retObj = new DAOLogin();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._username					 = Convert.IsDBNull(row["username"]) ? null : (string)row["username"];
						retObj._password					 = Convert.IsDBNull(row["password"]) ? null : (string)row["password"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOLogin.
		///</returns>
		///<parameters>
		///DAOLogin daoLogin
		///</parameters>
		public static IList<DAOLogin> SelectAllBySearchFields(DAOLogin daoLogin)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("login");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoLogin.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@username", SqlDbType.VarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoLogin.Username?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@password", SqlDbType.VarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoLogin.Password?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoLogin.Technicianid?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOLogin> objList = new List<DAOLogin>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOLogin retObj = new DAOLogin();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? (Int32?)null : (Int32?)row["id"];
						retObj._username					 = Convert.IsDBNull(row["username"]) ? null : (string)row["username"];
						retObj._password					 = Convert.IsDBNull(row["password"]) ? null : (string)row["password"];
						retObj._technicianid					 = Convert.IsDBNull(row["technicianid"]) ? (Int32?)null : (Int32?)row["technicianid"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOLogin daoLogin
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOLogin daoLogin)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoLogin.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@username", SqlDbType.VarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoLogin.Username?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@password", SqlDbType.VarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoLogin.Password?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)daoLogin.Technicianid?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table login based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprlogin_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@username", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_username?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@password", SqlDbType.VarChar, 255, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_password?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@technicianid", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_technicianid?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@id"].Value;
				_username					 = Convert.IsDBNull(command.Parameters["@username"].Value) ? null : (string)command.Parameters["@username"].Value;
				_password					 = Convert.IsDBNull(command.Parameters["@password"].Value) ? null : (string)command.Parameters["@password"].Value;
				_technicianid					 = Convert.IsDBNull(command.Parameters["@technicianid"].Value) ? (Int32?)null : (Int32?)command.Parameters["@technicianid"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public string Username
		{
			get
			{
				return _username;
			}
			set
			{
				_username = value;
			}
		}

		public string Password
		{
			get
			{
				return _password;
			}
			set
			{
				_password = value;
			}
		}

		public Int32? Technicianid
		{
			get
			{
				return _technicianid;
			}
			set
			{
				_technicianid = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace HelpDeskManager.Data
{
	public partial class InlineProcs
	{
		internal static string ctprlogin_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[id]
			,[username]
			,[password]
			,[technicianid]
			FROM [dbo].[login]
			WHERE 
			[id] = @id
			";

		internal static string ctprlogin_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[login]
			WHERE 
			[id] = @id
			";

		internal static string ctprlogin_SelectAllByTechnicianid = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[id]
			,[username]
			,[password]
			,[technicianid]
			FROM [dbo].[login]
			WHERE 
			[technicianid] = @technicianid OR ([technicianid] IS NULL AND @technicianid IS NULL)
			";

		internal static string ctprlogin_SelectAllByTechnicianidCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[login]
			WHERE 
			[technicianid] = @technicianid OR ([technicianid] IS NULL AND @technicianid IS NULL)
			";

		internal static string ctprlogin_DeleteAllByTechnicianid = @"
			
			-- delete all matching from the table
			DELETE [dbo].[login]
			WHERE 
			[technicianid] = @technicianid OR ([technicianid] IS NULL AND @technicianid IS NULL)
			";

		internal static string ctprlogin_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[login]
			(
			[username]
			,[password]
			,[technicianid]
			)
			VALUES
			(
			@username
			,@password
			,@technicianid
			)
			SELECT 
			@id = [id]
			,@username = [username]
			,@password = [password]
			,@technicianid = [technicianid]
			FROM [dbo].[login]
			WHERE 
			id = SCOPE_IDENTITY()
			";

		internal static string ctprlogin_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[id]
			,[username]
			,[password]
			,[technicianid]
			FROM [dbo].[login]
			";

		internal static string ctprlogin_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[login]
			";

		internal static string ctprlogin_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[id],
			[username],
			[password],
			[technicianid]
			FROM [dbo].[login]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([username] LIKE @username OR @username is null)
			AND ([password] LIKE @password OR @password is null)
			AND ([technicianid] LIKE @technicianid OR @technicianid is null)
			";

		internal static string ctprlogin_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[login]
			WHERE 
			([id] LIKE @id OR @id is null)
			AND ([username] LIKE @username OR @username is null)
			AND ([password] LIKE @password OR @password is null)
			AND ([technicianid] LIKE @technicianid OR @technicianid is null)
			";

		internal static string ctprlogin_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[login]
			SET
			[username] = @username
			,[password] = @password
			,[technicianid] = @technicianid
			WHERE 
			[id] = @id
			SELECT 
			@id = [id]
			,@username = [username]
			,@password = [password]
			,@technicianid = [technicianid]
			FROM [dbo].[login]
			WHERE 
			[id] = @id
			";

	}
}
#endregion
