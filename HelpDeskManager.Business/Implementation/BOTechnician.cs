/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 9/16/2016 11:50:03 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using HelpDeskManager.Data;

namespace HelpDeskManager.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOTechnician.
	///It maintains a collection of BOIssue,BOLogin,BOVisitation objects.
	///</Summary>
	[DataContract]
	public partial class BOTechnician : HelpDesk_BaseBusiness
	{
		#region member variables
		protected Int32? _id;
		protected string _name;
		protected Int32? _designationid;
		protected Int32? _roleid;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOIssue> _boIssueCollection;
		List<BOLogin> _boLoginCollection;
		List<BOVisitation> _boVisitationCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOTechnician()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BOTechnician(Int32 id)
		{
			try
			{
				DAOTechnician daoTechnician = DAOTechnician.SelectOne(id);
				_id = daoTechnician.Id;
				_name = daoTechnician.Name;
				_designationid = daoTechnician.Designationid;
				_roleid = daoTechnician.Roleid;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOTechnician
		///</parameters>
		protected internal BOTechnician(DAOTechnician daoTechnician)
		{
			try
			{
				_id = daoTechnician.Id;
				_name = daoTechnician.Name;
				_designationid = daoTechnician.Designationid;
				_roleid = daoTechnician.Roleid;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Technician record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOTechnician daoTechnician = new DAOTechnician();
			RegisterDataObject(daoTechnician);
			BeginTransaction("savenewBOTechnician");
			try
			{
				daoTechnician.Name = _name;
				daoTechnician.Designationid = _designationid;
				daoTechnician.Roleid = _roleid;
				daoTechnician.Insert();
				CommitTransaction();
				
				_id = daoTechnician.Id;
				_name = daoTechnician.Name;
				_designationid = daoTechnician.Designationid;
				_roleid = daoTechnician.Roleid;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOTechnician");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Technician record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTechnician
		///</parameters>
		public virtual void Update()
		{
			DAOTechnician daoTechnician = new DAOTechnician();
			RegisterDataObject(daoTechnician);
			BeginTransaction("updateBOTechnician");
			try
			{
				daoTechnician.Id = _id;
				daoTechnician.Name = _name;
				daoTechnician.Designationid = _designationid;
				daoTechnician.Roleid = _roleid;
				daoTechnician.Update();
				CommitTransaction();
				
				_id = daoTechnician.Id;
				_name = daoTechnician.Name;
				_designationid = daoTechnician.Designationid;
				_roleid = daoTechnician.Roleid;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOTechnician");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Technician record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOTechnician daoTechnician = new DAOTechnician();
			RegisterDataObject(daoTechnician);
			BeginTransaction("deleteBOTechnician");
			try
			{
				daoTechnician.Id = _id;
				daoTechnician.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOTechnician");
				throw;
			}
		}
		
		///<Summary>
		///TechnicianCollection
		///This method returns the collection of BOTechnician objects
		///</Summary>
		///<returns>
		///List[BOTechnician]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTechnician> TechnicianCollection()
		{
			try
			{
				IList<BOTechnician> boTechnicianCollection = new List<BOTechnician>();
				IList<DAOTechnician> daoTechnicianCollection = DAOTechnician.SelectAll();
			
				foreach(DAOTechnician daoTechnician in daoTechnicianCollection)
					boTechnicianCollection.Add(new BOTechnician(daoTechnician));
			
				return boTechnicianCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TechnicianCollectionCount
		///This method returns the collection count of BOTechnician objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 TechnicianCollectionCount()
		{
			try
			{
				Int32 objCount = DAOTechnician.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TechnicianCollectionFromSearchFields
		///This method returns the collection of BOTechnician objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOTechnician>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTechnician> TechnicianCollectionFromSearchFields(BOTechnician boTechnician)
		{
			try
			{
				IList<BOTechnician> boTechnicianCollection = new List<BOTechnician>();
				DAOTechnician daoTechnician = new DAOTechnician();
				daoTechnician.Id = boTechnician.Id;
				daoTechnician.Name = boTechnician.Name;
				daoTechnician.Designationid = boTechnician.Designationid;
				daoTechnician.Roleid = boTechnician.Roleid;
				IList<DAOTechnician> daoTechnicianCollection = DAOTechnician.SelectAllBySearchFields(daoTechnician);
			
				foreach(DAOTechnician resdaoTechnician in daoTechnicianCollection)
					boTechnicianCollection.Add(new BOTechnician(resdaoTechnician));
			
				return boTechnicianCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TechnicianCollectionFromSearchFieldsCount
		///This method returns the collection count of BOTechnician objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 TechnicianCollectionFromSearchFieldsCount(BOTechnician boTechnician)
		{
			try
			{
				DAOTechnician daoTechnician = new DAOTechnician();
				daoTechnician.Id = boTechnician.Id;
				daoTechnician.Name = boTechnician.Name;
				daoTechnician.Designationid = boTechnician.Designationid;
				daoTechnician.Roleid = boTechnician.Roleid;
				Int32 objCount = DAOTechnician.SelectAllBySearchFieldsCount(daoTechnician);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///IssueCollection
		///This method returns its collection of BOIssue objects
		///</Summary>
		///<returns>
		///IList[BOIssue]
		///</returns>
		///<parameters>
		///BOTechnician
		///</parameters>
		public virtual IList<BOIssue> IssueCollection()
		{
			try
			{
				if(_boIssueCollection == null)
					LoadIssueCollection();
				
				return _boIssueCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoginCollection
		///This method returns its collection of BOLogin objects
		///</Summary>
		///<returns>
		///IList[BOLogin]
		///</returns>
		///<parameters>
		///BOTechnician
		///</parameters>
		public virtual IList<BOLogin> LoginCollection()
		{
			try
			{
				if(_boLoginCollection == null)
					LoadLoginCollection();
				
				return _boLoginCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///VisitationCollection
		///This method returns its collection of BOVisitation objects
		///</Summary>
		///<returns>
		///IList[BOVisitation]
		///</returns>
		///<parameters>
		///BOTechnician
		///</parameters>
		public virtual IList<BOVisitation> VisitationCollection()
		{
			try
			{
				if(_boVisitationCollection == null)
					LoadVisitationCollection();
				
				return _boVisitationCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadIssueCollection
		///This method loads the internal collection of BOIssue objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadIssueCollection()
		{
			try
			{
				_boIssueCollection = new List<BOIssue>();
				IList<DAOIssue> daoIssueCollection = DAOIssue.SelectAllByTechnicianid(_id.Value);
				
				foreach(DAOIssue daoIssue in daoIssueCollection)
					_boIssueCollection.Add(new BOIssue(daoIssue));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddIssue
		///This method persists a BOIssue object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOIssue
		///</parameters>
		public virtual void AddIssue(BOIssue boIssue)
		{
			DAOIssue daoIssue = new DAOIssue();
			RegisterDataObject(daoIssue);
			BeginTransaction("addIssue");
			try
			{
				daoIssue.Id = boIssue.Id;
				daoIssue.Typeid = boIssue.Typeid;
				daoIssue.Staffid = boIssue.Staffid;
				daoIssue.Departmentid = boIssue.Departmentid;
				daoIssue.Statusid = boIssue.Statusid;
				daoIssue.Details = boIssue.Details;
				daoIssue.Remarks = boIssue.Remarks;
				daoIssue.Technicianid = _id.Value;
				daoIssue.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boIssue = new BOIssue(daoIssue);
				if(_boIssueCollection != null)
					_boIssueCollection.Add(boIssue);
			}
			catch
			{
				RollbackTransaction("addIssue");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllIssue
		///This method deletes all BOIssue objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllIssue()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllIssue");
			try
			{
				DAOIssue.DeleteAllByTechnicianid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boIssueCollection != null)
				{
					_boIssueCollection.Clear();
					_boIssueCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllIssue");
				throw;
			}
		}
		
		///<Summary>
		///LoadLoginCollection
		///This method loads the internal collection of BOLogin objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadLoginCollection()
		{
			try
			{
				_boLoginCollection = new List<BOLogin>();
				IList<DAOLogin> daoLoginCollection = DAOLogin.SelectAllByTechnicianid(_id.Value);
				
				foreach(DAOLogin daoLogin in daoLoginCollection)
					_boLoginCollection.Add(new BOLogin(daoLogin));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddLogin
		///This method persists a BOLogin object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOLogin
		///</parameters>
		public virtual void AddLogin(BOLogin boLogin)
		{
			DAOLogin daoLogin = new DAOLogin();
			RegisterDataObject(daoLogin);
			BeginTransaction("addLogin");
			try
			{
				daoLogin.Id = boLogin.Id;
				daoLogin.Username = boLogin.Username;
				daoLogin.Password = boLogin.Password;
				daoLogin.Technicianid = _id.Value;
				daoLogin.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boLogin = new BOLogin(daoLogin);
				if(_boLoginCollection != null)
					_boLoginCollection.Add(boLogin);
			}
			catch
			{
				RollbackTransaction("addLogin");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllLogin
		///This method deletes all BOLogin objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllLogin()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllLogin");
			try
			{
				DAOLogin.DeleteAllByTechnicianid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boLoginCollection != null)
				{
					_boLoginCollection.Clear();
					_boLoginCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllLogin");
				throw;
			}
		}
		
		///<Summary>
		///LoadVisitationCollection
		///This method loads the internal collection of BOVisitation objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadVisitationCollection()
		{
			try
			{
				_boVisitationCollection = new List<BOVisitation>();
				IList<DAOVisitation> daoVisitationCollection = DAOVisitation.SelectAllByStaffid(_id.Value);
				
				foreach(DAOVisitation daoVisitation in daoVisitationCollection)
					_boVisitationCollection.Add(new BOVisitation(daoVisitation));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddVisitation
		///This method persists a BOVisitation object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOVisitation
		///</parameters>
		public virtual void AddVisitation(BOVisitation boVisitation)
		{
			DAOVisitation daoVisitation = new DAOVisitation();
			RegisterDataObject(daoVisitation);
			BeginTransaction("addVisitation");
			try
			{
				daoVisitation.Id = boVisitation.Id;
				daoVisitation.Name = boVisitation.Name;
				daoVisitation.Arrived = boVisitation.Arrived;
				daoVisitation.Purpose = boVisitation.Purpose;
				daoVisitation.Departed = boVisitation.Departed;
				daoVisitation.Staffid = _id.Value;
				daoVisitation.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boVisitation = new BOVisitation(daoVisitation);
				if(_boVisitationCollection != null)
					_boVisitationCollection.Add(boVisitation);
			}
			catch
			{
				RollbackTransaction("addVisitation");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllVisitation
		///This method deletes all BOVisitation objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllVisitation()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllVisitation");
			try
			{
				DAOVisitation.DeleteAllByStaffid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boVisitationCollection != null)
				{
					_boVisitationCollection.Clear();
					_boVisitationCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllVisitation");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		[DataMember]
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual Int32? Designationid
		{
			get
			{
				 return _designationid;
			}
			set
			{
				_designationid = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual Int32? Roleid
		{
			get
			{
				 return _roleid;
			}
			set
			{
				_roleid = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		[DataMember]
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
