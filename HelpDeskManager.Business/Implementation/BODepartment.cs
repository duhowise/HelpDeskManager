/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 9/16/2016 11:50:03 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using HelpDeskManager.Data;

namespace HelpDeskManager.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BODepartment.
	///It maintains a collection of BOIssue,BOStaff objects.
	///</Summary>
	[DataContract]
	public partial class BODepartment : HelpDesk_BaseBusiness
	{
		#region member variables
		protected Int32? _id;
		protected string _name;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOIssue> _boIssueCollection;
		List<BOStaff> _boStaffCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BODepartment()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BODepartment(Int32 id)
		{
			try
			{
				DAODepartment daoDepartment = DAODepartment.SelectOne(id);
				_id = daoDepartment.Id;
				_name = daoDepartment.Name;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAODepartment
		///</parameters>
		protected internal BODepartment(DAODepartment daoDepartment)
		{
			try
			{
				_id = daoDepartment.Id;
				_name = daoDepartment.Name;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Department record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAODepartment daoDepartment = new DAODepartment();
			RegisterDataObject(daoDepartment);
			BeginTransaction("savenewBODepartment");
			try
			{
				daoDepartment.Name = _name;
				daoDepartment.Insert();
				CommitTransaction();
				
				_id = daoDepartment.Id;
				_name = daoDepartment.Name;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBODepartment");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Department record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BODepartment
		///</parameters>
		public virtual void Update()
		{
			DAODepartment daoDepartment = new DAODepartment();
			RegisterDataObject(daoDepartment);
			BeginTransaction("updateBODepartment");
			try
			{
				daoDepartment.Id = _id;
				daoDepartment.Name = _name;
				daoDepartment.Update();
				CommitTransaction();
				
				_id = daoDepartment.Id;
				_name = daoDepartment.Name;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBODepartment");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Department record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAODepartment daoDepartment = new DAODepartment();
			RegisterDataObject(daoDepartment);
			BeginTransaction("deleteBODepartment");
			try
			{
				daoDepartment.Id = _id;
				daoDepartment.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBODepartment");
				throw;
			}
		}
		
		///<Summary>
		///DepartmentCollection
		///This method returns the collection of BODepartment objects
		///</Summary>
		///<returns>
		///List[BODepartment]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BODepartment> DepartmentCollection()
		{
			try
			{
				IList<BODepartment> boDepartmentCollection = new List<BODepartment>();
				IList<DAODepartment> daoDepartmentCollection = DAODepartment.SelectAll();
			
				foreach(DAODepartment daoDepartment in daoDepartmentCollection)
					boDepartmentCollection.Add(new BODepartment(daoDepartment));
			
				return boDepartmentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DepartmentCollectionCount
		///This method returns the collection count of BODepartment objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DepartmentCollectionCount()
		{
			try
			{
				Int32 objCount = DAODepartment.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DepartmentCollectionFromSearchFields
		///This method returns the collection of BODepartment objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BODepartment>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BODepartment> DepartmentCollectionFromSearchFields(BODepartment boDepartment)
		{
			try
			{
				IList<BODepartment> boDepartmentCollection = new List<BODepartment>();
				DAODepartment daoDepartment = new DAODepartment();
				daoDepartment.Id = boDepartment.Id;
				daoDepartment.Name = boDepartment.Name;
				IList<DAODepartment> daoDepartmentCollection = DAODepartment.SelectAllBySearchFields(daoDepartment);
			
				foreach(DAODepartment resdaoDepartment in daoDepartmentCollection)
					boDepartmentCollection.Add(new BODepartment(resdaoDepartment));
			
				return boDepartmentCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DepartmentCollectionFromSearchFieldsCount
		///This method returns the collection count of BODepartment objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DepartmentCollectionFromSearchFieldsCount(BODepartment boDepartment)
		{
			try
			{
				DAODepartment daoDepartment = new DAODepartment();
				daoDepartment.Id = boDepartment.Id;
				daoDepartment.Name = boDepartment.Name;
				Int32 objCount = DAODepartment.SelectAllBySearchFieldsCount(daoDepartment);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///IssueCollection
		///This method returns its collection of BOIssue objects
		///</Summary>
		///<returns>
		///IList[BOIssue]
		///</returns>
		///<parameters>
		///BODepartment
		///</parameters>
		public virtual IList<BOIssue> IssueCollection()
		{
			try
			{
				if(_boIssueCollection == null)
					LoadIssueCollection();
				
				return _boIssueCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///StaffCollection
		///This method returns its collection of BOStaff objects
		///</Summary>
		///<returns>
		///IList[BOStaff]
		///</returns>
		///<parameters>
		///BODepartment
		///</parameters>
		public virtual IList<BOStaff> StaffCollection()
		{
			try
			{
				if(_boStaffCollection == null)
					LoadStaffCollection();
				
				return _boStaffCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadIssueCollection
		///This method loads the internal collection of BOIssue objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadIssueCollection()
		{
			try
			{
				_boIssueCollection = new List<BOIssue>();
				IList<DAOIssue> daoIssueCollection = DAOIssue.SelectAllByDepartmentid(_id.Value);
				
				foreach(DAOIssue daoIssue in daoIssueCollection)
					_boIssueCollection.Add(new BOIssue(daoIssue));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddIssue
		///This method persists a BOIssue object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOIssue
		///</parameters>
		public virtual void AddIssue(BOIssue boIssue)
		{
			DAOIssue daoIssue = new DAOIssue();
			RegisterDataObject(daoIssue);
			BeginTransaction("addIssue");
			try
			{
				daoIssue.Id = boIssue.Id;
				daoIssue.Typeid = boIssue.Typeid;
				daoIssue.Staffid = boIssue.Staffid;
				daoIssue.Statusid = boIssue.Statusid;
				daoIssue.Details = boIssue.Details;
				daoIssue.Technicianid = boIssue.Technicianid;
				daoIssue.Remarks = boIssue.Remarks;
				daoIssue.Departmentid = _id.Value;
				daoIssue.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boIssue = new BOIssue(daoIssue);
				if(_boIssueCollection != null)
					_boIssueCollection.Add(boIssue);
			}
			catch
			{
				RollbackTransaction("addIssue");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllIssue
		///This method deletes all BOIssue objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllIssue()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllIssue");
			try
			{
				DAOIssue.DeleteAllByDepartmentid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boIssueCollection != null)
				{
					_boIssueCollection.Clear();
					_boIssueCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllIssue");
				throw;
			}
		}
		
		///<Summary>
		///LoadStaffCollection
		///This method loads the internal collection of BOStaff objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadStaffCollection()
		{
			try
			{
				_boStaffCollection = new List<BOStaff>();
				IList<DAOStaff> daoStaffCollection = DAOStaff.SelectAllByDepartmentid(_id.Value);
				
				foreach(DAOStaff daoStaff in daoStaffCollection)
					_boStaffCollection.Add(new BOStaff(daoStaff));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddStaff
		///This method persists a BOStaff object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOStaff
		///</parameters>
		public virtual void AddStaff(BOStaff boStaff)
		{
			DAOStaff daoStaff = new DAOStaff();
			RegisterDataObject(daoStaff);
			BeginTransaction("addStaff");
			try
			{
				daoStaff.Id = boStaff.Id;
				daoStaff.Name = boStaff.Name;
				daoStaff.Designationid = boStaff.Designationid;
				daoStaff.Departmentid = _id.Value;
				daoStaff.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boStaff = new BOStaff(daoStaff);
				if(_boStaffCollection != null)
					_boStaffCollection.Add(boStaff);
			}
			catch
			{
				RollbackTransaction("addStaff");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllStaff
		///This method deletes all BOStaff objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllStaff()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllStaff");
			try
			{
				DAOStaff.DeleteAllByDepartmentid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boStaffCollection != null)
				{
					_boStaffCollection.Clear();
					_boStaffCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllStaff");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		[DataMember]
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		[DataMember]
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
