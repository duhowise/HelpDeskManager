/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 9/16/2016 11:50:03 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using HelpDeskManager.Data;

namespace HelpDeskManager.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BODesignation.
	///It maintains a collection of BOStaff,BOTechnician objects.
	///</Summary>
	[DataContract]
	public partial class BODesignation : HelpDesk_BaseBusiness
	{
		#region member variables
		protected Int32? _id;
		protected string _name;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOStaff> _boStaffCollection;
		List<BOTechnician> _boTechnicianCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BODesignation()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BODesignation(Int32 id)
		{
			try
			{
				DAODesignation daoDesignation = DAODesignation.SelectOne(id);
				_id = daoDesignation.Id;
				_name = daoDesignation.Name;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAODesignation
		///</parameters>
		protected internal BODesignation(DAODesignation daoDesignation)
		{
			try
			{
				_id = daoDesignation.Id;
				_name = daoDesignation.Name;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Designation record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAODesignation daoDesignation = new DAODesignation();
			RegisterDataObject(daoDesignation);
			BeginTransaction("savenewBODesignation");
			try
			{
				daoDesignation.Name = _name;
				daoDesignation.Insert();
				CommitTransaction();
				
				_id = daoDesignation.Id;
				_name = daoDesignation.Name;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBODesignation");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Designation record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BODesignation
		///</parameters>
		public virtual void Update()
		{
			DAODesignation daoDesignation = new DAODesignation();
			RegisterDataObject(daoDesignation);
			BeginTransaction("updateBODesignation");
			try
			{
				daoDesignation.Id = _id;
				daoDesignation.Name = _name;
				daoDesignation.Update();
				CommitTransaction();
				
				_id = daoDesignation.Id;
				_name = daoDesignation.Name;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBODesignation");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Designation record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAODesignation daoDesignation = new DAODesignation();
			RegisterDataObject(daoDesignation);
			BeginTransaction("deleteBODesignation");
			try
			{
				daoDesignation.Id = _id;
				daoDesignation.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBODesignation");
				throw;
			}
		}
		
		///<Summary>
		///DesignationCollection
		///This method returns the collection of BODesignation objects
		///</Summary>
		///<returns>
		///List[BODesignation]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BODesignation> DesignationCollection()
		{
			try
			{
				IList<BODesignation> boDesignationCollection = new List<BODesignation>();
				IList<DAODesignation> daoDesignationCollection = DAODesignation.SelectAll();
			
				foreach(DAODesignation daoDesignation in daoDesignationCollection)
					boDesignationCollection.Add(new BODesignation(daoDesignation));
			
				return boDesignationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DesignationCollectionCount
		///This method returns the collection count of BODesignation objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DesignationCollectionCount()
		{
			try
			{
				Int32 objCount = DAODesignation.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DesignationCollectionFromSearchFields
		///This method returns the collection of BODesignation objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BODesignation>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BODesignation> DesignationCollectionFromSearchFields(BODesignation boDesignation)
		{
			try
			{
				IList<BODesignation> boDesignationCollection = new List<BODesignation>();
				DAODesignation daoDesignation = new DAODesignation();
				daoDesignation.Id = boDesignation.Id;
				daoDesignation.Name = boDesignation.Name;
				IList<DAODesignation> daoDesignationCollection = DAODesignation.SelectAllBySearchFields(daoDesignation);
			
				foreach(DAODesignation resdaoDesignation in daoDesignationCollection)
					boDesignationCollection.Add(new BODesignation(resdaoDesignation));
			
				return boDesignationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///DesignationCollectionFromSearchFieldsCount
		///This method returns the collection count of BODesignation objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 DesignationCollectionFromSearchFieldsCount(BODesignation boDesignation)
		{
			try
			{
				DAODesignation daoDesignation = new DAODesignation();
				daoDesignation.Id = boDesignation.Id;
				daoDesignation.Name = boDesignation.Name;
				Int32 objCount = DAODesignation.SelectAllBySearchFieldsCount(daoDesignation);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///StaffCollection
		///This method returns its collection of BOStaff objects
		///</Summary>
		///<returns>
		///IList[BOStaff]
		///</returns>
		///<parameters>
		///BODesignation
		///</parameters>
		public virtual IList<BOStaff> StaffCollection()
		{
			try
			{
				if(_boStaffCollection == null)
					LoadStaffCollection();
				
				return _boStaffCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///TechnicianCollection
		///This method returns its collection of BOTechnician objects
		///</Summary>
		///<returns>
		///IList[BOTechnician]
		///</returns>
		///<parameters>
		///BODesignation
		///</parameters>
		public virtual IList<BOTechnician> TechnicianCollection()
		{
			try
			{
				if(_boTechnicianCollection == null)
					LoadTechnicianCollection();
				
				return _boTechnicianCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadStaffCollection
		///This method loads the internal collection of BOStaff objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadStaffCollection()
		{
			try
			{
				_boStaffCollection = new List<BOStaff>();
				IList<DAOStaff> daoStaffCollection = DAOStaff.SelectAllByDesignationid(_id.Value);
				
				foreach(DAOStaff daoStaff in daoStaffCollection)
					_boStaffCollection.Add(new BOStaff(daoStaff));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddStaff
		///This method persists a BOStaff object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOStaff
		///</parameters>
		public virtual void AddStaff(BOStaff boStaff)
		{
			DAOStaff daoStaff = new DAOStaff();
			RegisterDataObject(daoStaff);
			BeginTransaction("addStaff");
			try
			{
				daoStaff.Id = boStaff.Id;
				daoStaff.Name = boStaff.Name;
				daoStaff.Departmentid = boStaff.Departmentid;
				daoStaff.Designationid = _id.Value;
				daoStaff.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boStaff = new BOStaff(daoStaff);
				if(_boStaffCollection != null)
					_boStaffCollection.Add(boStaff);
			}
			catch
			{
				RollbackTransaction("addStaff");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllStaff
		///This method deletes all BOStaff objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllStaff()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllStaff");
			try
			{
				DAOStaff.DeleteAllByDesignationid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boStaffCollection != null)
				{
					_boStaffCollection.Clear();
					_boStaffCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllStaff");
				throw;
			}
		}
		
		///<Summary>
		///LoadTechnicianCollection
		///This method loads the internal collection of BOTechnician objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadTechnicianCollection()
		{
			try
			{
				_boTechnicianCollection = new List<BOTechnician>();
				IList<DAOTechnician> daoTechnicianCollection = DAOTechnician.SelectAllByDesignationid(_id.Value);
				
				foreach(DAOTechnician daoTechnician in daoTechnicianCollection)
					_boTechnicianCollection.Add(new BOTechnician(daoTechnician));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddTechnician
		///This method persists a BOTechnician object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTechnician
		///</parameters>
		public virtual void AddTechnician(BOTechnician boTechnician)
		{
			DAOTechnician daoTechnician = new DAOTechnician();
			RegisterDataObject(daoTechnician);
			BeginTransaction("addTechnician");
			try
			{
				daoTechnician.Id = boTechnician.Id;
				daoTechnician.Name = boTechnician.Name;
				daoTechnician.Roleid = boTechnician.Roleid;
				daoTechnician.Designationid = _id.Value;
				daoTechnician.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boTechnician = new BOTechnician(daoTechnician);
				if(_boTechnicianCollection != null)
					_boTechnicianCollection.Add(boTechnician);
			}
			catch
			{
				RollbackTransaction("addTechnician");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllTechnician
		///This method deletes all BOTechnician objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllTechnician()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllTechnician");
			try
			{
				DAOTechnician.DeleteAllByDesignationid(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boTechnicianCollection != null)
				{
					_boTechnicianCollection.Clear();
					_boTechnicianCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllTechnician");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		[DataMember]
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		[DataMember]
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
