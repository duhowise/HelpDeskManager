/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 9/16/2016 11:50:03 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using HelpDeskManager.Data;

namespace HelpDeskManager.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOVisitation.
	///</Summary>
	[DataContract]
	public partial class BOVisitation : HelpDesk_BaseBusiness
	{
		#region member variables
		protected Int32? _id;
		protected string _name;
		protected DateTime? _arrived;
		protected Int32? _staffid;
		protected string _purpose;
		protected DateTime? _departed;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOVisitation()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BOVisitation(Int32 id)
		{
			try
			{
				DAOVisitation daoVisitation = DAOVisitation.SelectOne(id);
				_id = daoVisitation.Id;
				_name = daoVisitation.Name;
				_arrived = daoVisitation.Arrived;
				_staffid = daoVisitation.Staffid;
				_purpose = daoVisitation.Purpose;
				_departed = daoVisitation.Departed;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOVisitation
		///</parameters>
		protected internal BOVisitation(DAOVisitation daoVisitation)
		{
			try
			{
				_id = daoVisitation.Id;
				_name = daoVisitation.Name;
				_arrived = daoVisitation.Arrived;
				_staffid = daoVisitation.Staffid;
				_purpose = daoVisitation.Purpose;
				_departed = daoVisitation.Departed;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Visitation record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOVisitation daoVisitation = new DAOVisitation();
			RegisterDataObject(daoVisitation);
			BeginTransaction("savenewBOVisitation");
			try
			{
				daoVisitation.Id = _id;
				daoVisitation.Name = _name;
				daoVisitation.Arrived = _arrived;
				daoVisitation.Staffid = _staffid;
				daoVisitation.Purpose = _purpose;
				daoVisitation.Departed = _departed;
				daoVisitation.Insert();
				CommitTransaction();
				
				_id = daoVisitation.Id;
				_name = daoVisitation.Name;
				_arrived = daoVisitation.Arrived;
				_staffid = daoVisitation.Staffid;
				_purpose = daoVisitation.Purpose;
				_departed = daoVisitation.Departed;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOVisitation");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Visitation record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOVisitation
		///</parameters>
		public virtual void Update()
		{
			DAOVisitation daoVisitation = new DAOVisitation();
			RegisterDataObject(daoVisitation);
			BeginTransaction("updateBOVisitation");
			try
			{
				daoVisitation.Id = _id;
				daoVisitation.Name = _name;
				daoVisitation.Arrived = _arrived;
				daoVisitation.Staffid = _staffid;
				daoVisitation.Purpose = _purpose;
				daoVisitation.Departed = _departed;
				daoVisitation.Update();
				CommitTransaction();
				
				_id = daoVisitation.Id;
				_name = daoVisitation.Name;
				_arrived = daoVisitation.Arrived;
				_staffid = daoVisitation.Staffid;
				_purpose = daoVisitation.Purpose;
				_departed = daoVisitation.Departed;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOVisitation");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Visitation record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOVisitation daoVisitation = new DAOVisitation();
			RegisterDataObject(daoVisitation);
			BeginTransaction("deleteBOVisitation");
			try
			{
				daoVisitation.Id = _id;
				daoVisitation.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOVisitation");
				throw;
			}
		}
		
		///<Summary>
		///VisitationCollection
		///This method returns the collection of BOVisitation objects
		///</Summary>
		///<returns>
		///List[BOVisitation]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOVisitation> VisitationCollection()
		{
			try
			{
				IList<BOVisitation> boVisitationCollection = new List<BOVisitation>();
				IList<DAOVisitation> daoVisitationCollection = DAOVisitation.SelectAll();
			
				foreach(DAOVisitation daoVisitation in daoVisitationCollection)
					boVisitationCollection.Add(new BOVisitation(daoVisitation));
			
				return boVisitationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VisitationCollectionCount
		///This method returns the collection count of BOVisitation objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 VisitationCollectionCount()
		{
			try
			{
				Int32 objCount = DAOVisitation.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VisitationCollectionFromSearchFields
		///This method returns the collection of BOVisitation objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOVisitation>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOVisitation> VisitationCollectionFromSearchFields(BOVisitation boVisitation)
		{
			try
			{
				IList<BOVisitation> boVisitationCollection = new List<BOVisitation>();
				DAOVisitation daoVisitation = new DAOVisitation();
				daoVisitation.Id = boVisitation.Id;
				daoVisitation.Name = boVisitation.Name;
				daoVisitation.Arrived = boVisitation.Arrived;
				daoVisitation.Staffid = boVisitation.Staffid;
				daoVisitation.Purpose = boVisitation.Purpose;
				daoVisitation.Departed = boVisitation.Departed;
				IList<DAOVisitation> daoVisitationCollection = DAOVisitation.SelectAllBySearchFields(daoVisitation);
			
				foreach(DAOVisitation resdaoVisitation in daoVisitationCollection)
					boVisitationCollection.Add(new BOVisitation(resdaoVisitation));
			
				return boVisitationCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///VisitationCollectionFromSearchFieldsCount
		///This method returns the collection count of BOVisitation objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 VisitationCollectionFromSearchFieldsCount(BOVisitation boVisitation)
		{
			try
			{
				DAOVisitation daoVisitation = new DAOVisitation();
				daoVisitation.Id = boVisitation.Id;
				daoVisitation.Name = boVisitation.Name;
				daoVisitation.Arrived = boVisitation.Arrived;
				daoVisitation.Staffid = boVisitation.Staffid;
				daoVisitation.Purpose = boVisitation.Purpose;
				daoVisitation.Departed = boVisitation.Departed;
				Int32 objCount = DAOVisitation.SelectAllBySearchFieldsCount(daoVisitation);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		[DataMember]
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual DateTime? Arrived
		{
			get
			{
				 return _arrived;
			}
			set
			{
				_arrived = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual Int32? Staffid
		{
			get
			{
				 return _staffid;
			}
			set
			{
				_staffid = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual string Purpose
		{
			get
			{
				 return _purpose;
			}
			set
			{
				_purpose = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual DateTime? Departed
		{
			get
			{
				 return _departed;
			}
			set
			{
				_departed = value;
				_isDirty = true;
			}
		}
		
		[DataMember]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		[DataMember]
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
